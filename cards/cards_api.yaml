# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Cards API
  description: |
    Card is the basic representation for content inside Smart Canvas. Every piece of content hosted
    in the product was previously cardified. This API allows you to create and get cards from Smart
    Canvas.

    Scopes related with this resource:
    - smartcanvas.cards.read: can read cards from Smart Canvas
    - smartcanvas.cards.write: can create a new card inside Smart Canvas. Can delete or update your own cards.
    - smartcanvas.cards.moderate: can moderate cards from Smart Canvas, can delete or update any card
  contact:
    name: Smart Canvas Dev Team
    url: http://www.smartcanvas.com
    email: dev@smartcanvas.com
  version: "1.0.0"
# the domain of the service
host: api.smartcanvas.com
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /card/v1
produces:
  - application/json
paths:
  /cards:
    post:
      summary: Create a Card
      operationId: saveCard
      tags:
        - Cards
      description: |
        Creates a new card inside Smart Canvas.
        This operation requires the scope 'smartcanvas.cards.write' or 'smartcanvas.cards.moderate'.
        If 'isAutoModerated' attribute is set to 'true', you must have 'smartcanvas.cards.moderate' privilege.
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            Authorization token. The person must have publisher or admin privileges.
          required: true
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: card
          in: body
          description: Card to be created
          required: true
          schema:
            $ref: '#/definitions/Card'
      responses:
        200:
          description: Card have been created successfully
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'

    get:
      summary: List Cards
      operationId: listCards
      tags:
        - Cards
      description: |
        Returns a list of cards that matches a specific search criteria. All cards returned may also contain information
        such as attachments, user activities (like, dislike, etc) and comments.
        This operation requires the scope 'smartcanvas.cards.read'
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            If this request is being made on behalf of a specific person, this parameter
            must be provided. If not provided, only public cards will be returned.
          required: false
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: q
          in: query
          description: |
            Search term that will be used to filter content. Smart Canvas will look into title,
            category, content and other indexable fields to match the search criteria.
            Example = google cloud
          required: true
          type: string
        - name: status
          in: query
          description: |
            | Card status | Description |
            |-------------|-------------|
            | any | Any status |
            | approved | Card has already been approved by the moderator |
            | pending | Card is waiting for moderation |
            | expired | Card is expired |
            | rejected (* TODO) | Cards rejected by moderators |
          required: false
          type: string
          default: approved
        - name: locale
          in: query
          description: |
            Locale to be used. Locales used the following format [language]-[country].
            If ommited, Smart Canvas will use the default locale to handle this request.
            Examples = pt-br, en-us
          required: false
          type: string
        - name: limit
          in: query
          description: |
            Maximum number of cards to retrieve. If ommited, Smart Canvas will use the default page size
            configured for this tenant. Maximum value for this attribute is 100.
            Example: 10
          required: false
          type: integer
          format: int32
          default: 10
        - name: offset
          in: query
          description: Offset to be applied to the result set. If ommited, offset = 0.
          required: false
          type: integer
          format: int32
          default: 0
        - name: initDate
          in: query
          description: Returns only cards with publishing date >= this parameter. Format = yyyy-mm-dd
          required: false
          type: string
          format: date
        - name: endDate
          in: query
          description: Returns only cards with publishing date <= this parameter. Format = yyyy-mm-dd
          required: false
          type: string
          format: date
        - name: maxAge
          in: query
          description: Max age, in days, of the card
          required: false
          type: integer
          format: int32
        - name: category
          in: query
          description: Comma-separated list of categories. Returns only cards that have this specific categories.
          required: false
          type: string
        - name: meta-tag
          in: query
          description: Comma-separated list of meta-tags. Returns only cards that have this specific tag.
          required: false
          type: string
        - name: authorId
          in: query
          description: Return only cards posted by a specific author.
          required: false
          type: string
        - name: communityId
          in: query
          description: Return only cards posted in a specific community.
          required: false
          type: string
        - name: providerId
          in: query
          description: Return only cards posted from a specific provider
          required: false
          type: string
        - name: jsonExtendedData
          in: query
          description: |
            Return only cards that contains this specific json extended data. Note: the card must have been ingested with it.
          required: false
          type: string
        - name: curationStrategy
          in: query
          description: |
            | Curation (sort) Stretegy | Description |
            |--------------------------|-------------|
            | date (default) | sort by date |
            | popularity | sort by popularity |
            | recommendation | sort by recommendation |
          required: false
          type: string
        - name: decayment
          in: query
          description: |
            Decayment factor to be applied to the card's sort strategy based on its age, regardless the curation strategy.
            This number should be a decimal between 0 and 1. 0 (default) means that no decayment will be applied to the search order,
            and 1 means that the most aggressive decayment will be applied.
          required: false
          type: number
          format: float
          default: 0
        - name: fields
          in: query
          description: |
            Comma-separated fields to include in the response. If ommited, the response will contain all fields.
            See documentation for possible values. Example = title,summary,content.
          required: false
          type: string
        - name: embed
          in: query
          description: |
            Comma-separated list of related entities to include in the response. If ommited, the response will contain all entities.
            See documentation for possible values. Examples = author, contentProvider, attachments, userActivities, permission, locale.
          type: string
      responses:
        200:
          description: A paged array of cards
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'

  /cards/{id}:
    put:
      summary: Update a Card
      operationId: updateCard
      tags:
        - Cards
      description: |
        Updates a card inside Smart Canvas.
        This operation requires the scope 'smartcanvas.cards.write' or 'smartcanvas.cards.moderate'.
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            Authorization token. The person must have publisher or admin privileges.
          required: true
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: id
          in: path
          description: Card ID or mnemonic
          required: true
          type: string
        - name: fields
          in: query
          description: |
            Comma-separated fields to be considered in the update process. If ommited, all fields will be updated.
            See documentation for possible values. Examples = title,summary,content.
          required: false
          type: string
        - name: embed
          in: query
          description: |
            Comma-separated list of related entities to be updated. If ommited, all entities will be updated.
            See documentation for possible values. Examples = author, contentProvider, attachments, userActivities, permission, locale.
          type: string
        - name: card
          in: body
          description: Card to be created
          required: true
          schema:
            $ref: '#/definitions/Card'
      responses:
        200:
          description: Card have been created successfully
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'

    delete:
      summary: Update a Card
      operationId: updateCard
      tags:
        - Cards
      description: |
        Updates a card inside Smart Canvas.
        This operation requires the scope 'smartcanvas.cards.write' or 'smartcanvas.cards.moderate'.
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            Authorization token. The person must have admin privileges.
          required: true
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: id
          in: path
          description: Card ID or mnemonic
          required: true
          type: string
      responses:
        200:
          description: Card have been created successfully
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'
    get:
      summary: Fetch a Card
      operationId: fetchCard
      tags:
        - Cards
      description: |
        Returns a specific card from Smart Canvas.
        This operation requires the scope 'smartcanvas.cards.read'.
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            If this parameter is not provided, only public cards can be fecthed this way.
          required: false
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: id
          in: path
          description: ID or mnemonic (Smart Canvas will search in this order) or a card.
          required: true
          type: string
        - name: status
          in: query
          description: |
            | Card status | Description |
            |-------------|-------------|
            | any | Any status |
            | approved | Card has already been approved by the moderator |
            | pending | Card is waiting for moderation |
            | expired | Card is expired |
          required: false
          type: string
          default: approved
        - name: fields
          in: query
          description: |
            The fields to include in the response. If ommited, the response will contain all fields.
            See documentation for possible values. Example = title,summary,content.
          required: false
          type: string
        - name: embed
          in: query
          description: |
            List of related entities to include in the response. If ommited, the response will contain all entities.
            Possible values are: categoryNames, author, contentProvider, attachments, userActivities, permission, locale.
            Example = author,attachments
          type: string
      responses:
        200:
          description: A card, if found. An empty JSON, if not found.
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'

  /cards/{cardId}/comments:
    post:
      summary: Comment a Card
      operationId: commentCard
      tags:
        - Comments
      description: |
        Creates a new comment to a specific card. The person cannot be anonymous.
        This operation requires the scope 'smartcanvas.cards.read'.
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            Authorization token.
          required: true
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: cardId
          in: path
          description: Card id or mnemonic
          required: true
          type: string
        - name: text
          in: query
          description: Comment text or content
          required: true
          type: string
      responses:
        200:
          description: Comment created successfully
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'

    get:
      summary: List Comments
      operationId: listComments
      tags:
        - Comments
      description: |
        List the comments of a specific card
        This operation requires the scope 'smartcanvas.cards.read'
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            Authorization token.
          required: true
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: cardId
          in: path
          description: Card id or mnemonic
          required: true
          type: string
        - name: limit
          in: query
          description: |
            Maximum number of comments to retrieve. If ommited, Smart Canvas will use the default page size
            configured for this tenant. Maximum value for this attribute is 100.
            Example: 10
          required: false
          type: integer
          format: int32
          default: 10
        - name: offset
          in: query
          description: Offset to be applied to the result set. If ommited, offset = 0.
          required: false
          type: integer
          format: int32
          default: 0
        - name: sort
          in: query
          description: Sort criteria. Two values are supported here = 'asc' or 'desc'. Default = asc
          required: false
          type: string
          default: asc
      responses:
        200:
          description: An array of comments
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'

  /cards/{cardId}/comments/{id}:
    put:
      summary: Update a Comment
      operationId: updateComment
      tags:
        - Comments
      description: |
        Updates the comment of a card. The person cannot be anonymous. You can only update your own comments.
        This operation requires the scope 'smartcanvas.cards.read'.
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            Authorization token.
          required: true
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: cardId
          in: path
          description: Card id or mnemonic
          required: true
          type: string
        - name: id
          in: path
          description: Comment ID
          required: true
          type: string
        - name: text
          in: query
          description: New text for the comment
          required: true
          type: string
      responses:
        200:
          description: Comment updated successfully
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'
    delete:
      summary: Delete a Comment
      operationId: deleteComment
      tags:
        - Comments
      description: |
        Delete a comment from a card. You can only delete your own comments. Moderators can delete any comment.
        This operation requires the scope 'smartcanvas.cards.read' or 'smartcanvas.cards.moderate'
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            Authorization token.
          required: true
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: cardId
          in: path
          description: Card id or mnemonic
          required: true
          type: string
        - name: id
          in: path
          description: Comment ID
          required: true
          type: string
      responses:
        200:
          description: Comment deleted successfully
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'

  /moderation/{cardId}:
    put:
      summary: Moderate a Card
      operationId: moderateCard
      tags:
        - Moderation
      description: |
        Moderates a specific card.
        This operation requires the scope 'smartcanvas.cards.moderate'.
      parameters:
        - name: x-client-id
          in: header
          description: Access token required to make this API call
          required: true
          type: string
        - name: x-access-token
          in: header
          description: |
            Authorization token. Must have moderator or admin privileges.
          required: true
          type: string
        - name: x-suppress-response-codes
          in: header
          description: |
            If 'true', the HTTP response is always 200. Default = 'false'
          required: false
          type: boolean
          default: false
        - name: cardId
          in: path
          description: Card id or mnemonic
          required: true
          type: string
        - name: action
          in: query
          description: Action to be taken. Possible values are = approve, reject. Default = approve
          required: false
          type: string
          default: approve
      responses:
        200:
          description: Card moderated successfully
        400:
          description: Bad request. The request made was not ok. Invalid parameter values or missing ones.
          schema:
            $ref: '#/definitions/ErrorWithFields'
        401:
          description: Unauthorized. The request requires a user authentication but the access token or auth token was not found.
          schema:
            $ref: '#/definitions/BasicError'
        403:
          description: Forbidden. The user (auth token) doesn't have the proper scope to access that information.
          schema:
            $ref: '#/definitions/BasicError'
        404:
          description: Page not found.
          schema:
            $ref: '#/definitions/BasicError'
        500:
          description: Internal server error. something is going wrong inside Smart Canvas.
          schema:
            $ref: '#/definitions/BasicError'

definitions:
  Card:
    properties:
      id:
        type: integer
        format: int64
        description: Unique identifier for a card in Smart Canvas
      mnemonic:
        type: string
        description: Card mnemonic. The mnemonic is used to compose the URL of the card.
      title:
        type: string
        description: Title of the card
      summary:
        type: string
        description: Summary of the card
      content:
        type: string
        description: Content of the card
      community:
        type: array
        items:
          $ref: '#/definitions/Community'
          description: The community that this card belongs to
      createDate:
        type: integer
        format: int64
        description: Timestamp of this card creation
      updateDate:
        type: integer
        format: int64
        description: Timestamp of this card creation
      publishDate:
        type: integer
        format: int64
        description: Timestamp of this card publishing
      expirationDate:
        type: integer
        format: int64
        description: Timestamp of this card expiration
      isAutoModerated:
        type: boolean
        description: Indicates if this card is auto-moderated or not
      jsonExtendedData:
        type: string
        description: JSON data with extra information saved with this card
      categories:
        type: array
        items:
          type: string
        description: Categories (tags) associated to this card
      meta-tags:
        type: array
        items:
          type: string
        description: |
          Meta-tags associated to this card. Meta-tags are intented to be used by system / API only, not visible for end-users.
      author:
        $ref: '#/definitions/Author'
        description: Author of this card
      contentProvider:
        $ref: '#/definitions/ContentProvider'
        description: Information about the original source of this card
      attachments:
        type: array
        items:
          $ref: '#/definitions/Attachment'
        description: Attachments contained in this card
      userActivities:
        $ref: '#/definitions/UserActivity'
        readOnly: true
        description: Information about user activities such as like, share etc
      permission:
        $ref: '#/definitions/Permission'
        description: Security model data, includes security level and user / group permissions
      locale:
        $ref: '#/definitions/Locale'
        description: Locale and i18n information

  Author:
    properties:
      authorId:
        type: string
        description: |
          Author identification in Smart Canvas. That's a Person ID or email. If not provided, this author
          doesn't exist in Smart Canvas (but it's still valid).
      authorDisplayName:
        type: string
        description: Author display name
      authorAlias:
        type: string
        description: Author authorAlias (* TODO - o que eh isso?)
      authorImageURL:
        type: string
        description: Author image URL

  Community:
    properties:
      communityId:
        type: string
        description: Community ID or mnemonic
      communityDisplayName:
        type: string
        description: User-friendly community display name

  ContentProvider:
    properties:
      providerId:
        type: string
        description: Identifies the provider (ID or mnemonic), the original source of this content. Example = googleplus
      providerContentId:
        type: string
        description: Identifies this content on its original source
      providerContentURL:
        type: string
        description: Original URL of this content on its provider
      providerUserId:
        type: string
        description: The identifier of the author on the provider

  Attachment:
    properties:
      type:
        type: string
        description: Type of this attachment
      displayName:
        type: string
        description: Display name of this attachment
      contentURL:
        type: string
        description: Content URL for this attachment
      images:
        type: array
        items:
          $ref: '#/definitions/Image'
        description: Images contained in this attachment
      maxImageHeight:
        type: integer
        format: int32
        description: The max image height found for this attachment  (* TODO - vale manter?)
      maxImageWidth:
        type: integer
        format: int32
        description: The max image width found for this attachment (* TODO - vale manter?)
      embedURL:
        type: string
        format: Embed URL for this attachment (* TODO - o que eh isso?)
      jsonExtendedData:
        type: string
        description: JSON data with extra information saved with this attachment

  Image:
    properties:
      imageURL:
        type: string
        description: Image URL
      imageType:
        type: string
        description: Type of this image
      imageHeight:
        type: integer
        format: int32
        description: Image height
      imageWidth:
        type: integer
        format: int32
        description: Image width
      originalImageURL:
        type: string
        description: Original image URL on the content provider

  UserActivity:
    properties:
      type:
        type: string
        description: type of this user activity (example = like, dislike etc)
      counter:
        type: integer
        format: int32
        description: how many of this activities this card has
      target:
        type: string
        description: optional value that represents the target of this action. Examples = facebook, twitter, linkedin (for sharing)
      userActivityId:
        type: integer
        format: int64
        description: the internal ID of this activity for the user. Null if the user has no activity of this type.

  Comment:
    properties:
      id:
        type: integer
        format: int64
        description: Comment ID
      personId:
        type: integer
        format: int64
        description: Person ID
      personEmail:
        type: string
        description: Person email
      text:
        type: string
        description: Comment text (content)
      createDate:
        type: integer
        format: int64
        description: Timestamp of this comment creationg

  Permission:
    properties:
      securityLevel:
        type: integer
        format: int32
      groups:
        type: array
        items:
          type: string
      users:
        type: array
        items:
          type: string

  Locale:
    properties:
      languages:
        type: array
        items:
          type: string
      region:
        type: array
        items:
          type: string
      geoCode:
        type: string
        description: Geo code from where this card was created
      address:
        type: string
        description: Address from where this card was created
      placeName:
        type: string
        description: Name of the place from where this card was created

  BasicError:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

  ErrorWithFields:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
